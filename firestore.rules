rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ Helper functions for ownership validation
    function isOwner() {
      return request.auth != null
        && request.resource.data.ownerId == request.auth.uid;
    }

    function isSelfOwner() {
      return request.auth != null
        && resource.data.ownerId == request.auth.uid;
    }

    function isOwnerOfResource(resource) {
      return request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // ✅ Color Stories - Comprehensive security rules
    match /colorStories/{id} {
      allow read: if resource.data.access == 'public'
                   || resource.data.access == 'unlisted'
                   || (isAuthenticated() && isSelfOwner())
                   || isAdmin();
      
      allow create: if isAuthenticated() && isOwner();
      
      allow update: if (isSelfOwner() || isAdmin())
                    && validateColorStoryUpdate();
      
      allow delete: if isSelfOwner() || isAdmin();

      // ✅ Strict field validation for updates
      function validateColorStoryUpdate() {
        let allowedFields = ['access', 'spotlight', 'narration', 'usageGuide', 'heroImageUrl', 'audioUrl', 'status', 'progress', 'progressMessage', 'processing', 'updatedAt'];
        let restrictedFields = ['ownerId', 'createdAt', 'id'];
        
        return request.resource.data.keys().hasAll(['ownerId']) &&
               request.resource.data.ownerId == resource.data.ownerId &&
               !request.resource.data.keys().hasAny(restrictedFields.removeAll(['ownerId']));
      }
    }

    // ✅ Color Story Likes
    match /colorStoryLikes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                    request.resource.data.uid == request.auth.uid &&
                    request.resource.data.keys().hasAll(['storyId', 'uid', 'createdAt']);
      allow delete: if isAuthenticated() && 
                    resource.data.uid == request.auth.uid;
      allow update: if false; // Likes cannot be updated
    }

    // ✅ User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                  (request.auth.uid == userId || isAdmin());
      
      allow create: if isAuthenticated() && 
                    request.auth.uid == userId &&
                    request.resource.data.id == userId;
      
      allow update: if isAuthenticated() && 
                    request.auth.uid == userId &&
                    validateUserProfileUpdate();
      
      allow delete: if isAuthenticated() && 
                    request.auth.uid == userId;

      function validateUserProfileUpdate() {
        let allowedFields = ['displayName', 'bio', 'avatarUrl', 'preferences', 'autoPlayStoryAudio', 'reduceMotion', 'wifiOnlyAssets', 'defaultStoryVisibility', 'ambientAudioMode', 'updatedAt'];
        let restrictedFields = ['id', 'email', 'createdAt', 'plan'];
        
        return !request.resource.data.keys().hasAny(restrictedFields);
      }

      // ✅ User's favorite colors (subcollection)
      match /favoriteColors/{paintId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      // ✅ User's copied paints (subcollection)
      match /copiedPaints/{docId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // ✅ User Palettes
    match /palettes/{paletteId} {
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.keys().hasAll(['userId', 'name', 'colors', 'createdAt', 'updatedAt']);
      
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    request.resource.data.userId == resource.data.userId;
      
      allow delete: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
    }

    // ✅ System/Reference Collections (Read-only for users)
    match /paints/{paintId} {
      allow read: if true; // Public read access for paint database
      allow write: if isAdmin();
    }

    match /brands/{brandId} {
      allow read: if true; // Public read access for brand database
      allow write: if isAdmin();
    }

    match /settings/{docId} {
      allow read: if true; // Public read access for app settings
      allow write: if isAdmin();
    }

    // ✅ Projects (Color Stories)
    match /projects/{id} {
      allow read: if request.auth != null && resource.data.ownerId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // REGION: user-project-rules
    match /users/{uid}/projects/{projectId} {
      allow read, write: if request.auth != null && request.auth.uid == uid &&
                         request.resource.data.ownerId == uid;

      match /colorPlans/{planId} {
        allow read, write: if request.auth != null && request.auth.uid == uid &&
                           request.resource.data.ownerId == uid &&
                           request.resource.data.keys().hasAll(['ownerId', 'projectId', 'name', 'paletteColorIds', 'createdAt', 'updatedAt']);
      }

      match /photos/{photoId}/masks/{maskId} {
        allow read, write: if request.auth != null && request.auth.uid == uid &&
                           request.resource.data.keys().hasAll(['id', 'surface', 'polygons', 'createdAt', 'updatedAt']);
      }
    }
    // END REGION: user-project-rules

    // ✅ Admin-only Collections
    match /admins/{userId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // ✅ Visualizer Jobs - User-scoped access
    match /visualizerJobs/{jobId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.uid;
    }
    
    // ✅ Color Story Visuals - User-scoped subcollection
    match /colorStories/{storyId}/visuals/{doc} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.uid;
    }

    // ✅ Catch-all: Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}