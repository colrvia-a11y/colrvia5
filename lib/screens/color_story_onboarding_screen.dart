import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

/// Beautiful onboarding flow for Color Stories
class ColorStoryOnboardingScreen extends StatefulWidget {
  final VoidCallback onComplete;

  const ColorStoryOnboardingScreen({
    super.key,
    required this.onComplete,
  });

  @override
  State<ColorStoryOnboardingScreen> createState() =>
      _ColorStoryOnboardingScreenState();
}

class _ColorStoryOnboardingScreenState extends State<ColorStoryOnboardingScreen>
    with TickerProviderStateMixin {
  late AnimationController _animationController;
  late AnimationController _particleController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  final PageController _pageController = PageController();
  int _currentPage = 0;

  final List<OnboardingPage> _pages = [
    const OnboardingPage(
      title: "Welcome to\nColor Stories",
      subtitle:
          "Transform your color palettes into immersive, personalized journeys",
      icon: Icons.auto_stories,
      colors: [Color(0xFF4A90E2), Color(0xFF50C878)],
      description:
          "This isn't just another color app. It's your personal guide to understanding how colors can transform your space and your life.",
    ),
    const OnboardingPage(
      title: "AI-Powered\nNarratives",
      subtitle: "Every story is uniquely yours, generated by advanced AI",
      icon: Icons.psychology,
      colors: [Color(0xFFF2B897), Color(0xFFE5A177)],
      description:
          "Our AI creates personalized stories based on your lifestyle, preferences, and the emotional connection you have with colors.",
    ),
    const OnboardingPage(
      title: "Immersive\nExperiences",
      subtitle: "Feel your colors breathe, see them dance, connect deeply",
      icon: Icons.visibility,
      colors: [Color(0xFF6B73FF), Color(0xFF9B59B6)],
      description:
          "Multi-sensory experiences with breathing exercises, light simulations, and interactive elements that make you feel the colors.",
    ),
    const OnboardingPage(
      title: "Your Journey\nBegins",
      subtitle: "Ready to discover the stories your colors want to tell?",
      icon: Icons.rocket_launch,
      colors: [Color(0xFF50C878), Color(0xFF4A90E2)],
      description:
          "Start your first immersive color journey and discover how these hues can transform your daily life.",
    ),
  ];

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
  }

  void _initializeAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _particleController = AnimationController(
      duration: const Duration(seconds: 10),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0.0, 0.3),
      end: Offset.zero,
    ).animate(
        CurvedAnimation(parent: _animationController, curve: Curves.easeOut));

    _animationController.forward();
    _particleController.repeat();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              _pages[_currentPage].colors[0].withValues(alpha: 0.1),
              _pages[_currentPage].colors[1].withValues(alpha: 0.05),
              const Color(0xFF1a1a1a),
            ],
          ),
        ),
        child: Stack(
          children: [
            // Animated background particles
            _buildBackgroundParticles(),

            // Main content
            PageView.builder(
              controller: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _currentPage = index;
                });
                _animationController.forward(from: 0);
                HapticFeedback.lightImpact();
              },
              itemCount: _pages.length,
              itemBuilder: (context, index) {
                return _buildPage(_pages[index]);
              },
            ),

            // Page indicators
            Positioned(
              bottom: 200,
              left: 0,
              right: 0,
              child: _buildPageIndicators(),
            ),

            // Navigation buttons
            Positioned(
              bottom: 60,
              left: 32,
              right: 32,
              child: _buildNavigationButtons(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBackgroundParticles() {
    return AnimatedBuilder(
      animation: _particleController,
      builder: (context, child) {
        return CustomPaint(
          painter: OnboardingParticlePainter(
            _pages[_currentPage].colors,
            _particleController.value,
          ),
          size: MediaQuery.of(context).size,
        );
      },
    );
  }

  Widget _buildPage(OnboardingPage page) {
    return AnimatedBuilder(
      animation: Listenable.merge([_fadeAnimation, _slideAnimation]),
      builder: (context, child) {
        return FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: Padding(
              padding: const EdgeInsets.all(40),
              child: Column(
                children: [
                  const SizedBox(height: 100),

                  // Animated icon with color pulse
                  Container(
                    width: 120,
                    height: 120,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: RadialGradient(
                        colors: [
                          page.colors[0].withValues(alpha: 0.3),
                          page.colors[1].withValues(alpha: 0.1),
                        ],
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: page.colors[0].withValues(alpha: 0.3),
                          blurRadius: 30,
                          spreadRadius: 5,
                        ),
                      ],
                    ),
                    child: Icon(
                      page.icon,
                      size: 60,
                      color: Colors.white,
                    ),
                  ),

                  const SizedBox(height: 60),

                  // Title with gradient text
                  ShaderMask(
                    shaderCallback: (bounds) {
                      return LinearGradient(
                        colors: [page.colors[0], page.colors[1]],
                      ).createShader(bounds);
                    },
                    child: Text(
                      page.title,
                      style: const TextStyle(
                        fontSize: 42,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        height: 1.1,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),

                  const SizedBox(height: 24),

                  // Subtitle
                  Text(
                    page.subtitle,
                    style: const TextStyle(
                      fontSize: 18,
                      color: Colors.white70,
                      height: 1.4,
                    ),
                    textAlign: TextAlign.center,
                  ),

                  const SizedBox(height: 40),

                  // Description with enhanced styling
                  Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withValues(alpha: 0.05),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: page.colors[0].withValues(alpha: 0.2),
                        width: 1,
                      ),
                    ),
                    child: Text(
                      page.description,
                      style: const TextStyle(
                        fontSize: 16,
                        color: Colors.white,
                        height: 1.6,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),

                  const Spacer(),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildPageIndicators() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(_pages.length, (index) {
        return AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          margin: const EdgeInsets.symmetric(horizontal: 4),
          width: index == _currentPage ? 32 : 8,
          height: 8,
          decoration: BoxDecoration(
            color: index == _currentPage
                ? _pages[_currentPage].colors[0]
                : Colors.white.withValues(alpha: 0.3),
            borderRadius: BorderRadius.circular(4),
          ),
        );
      }),
    );
  }

  Widget _buildNavigationButtons() {
    return Row(
      children: [
        // Skip button
        if (_currentPage < _pages.length - 1)
          TextButton(
            onPressed: () {
              _pageController.animateToPage(
                _pages.length - 1,
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
              );
            },
            child: const Text(
              'Skip',
              style: TextStyle(
                color: Colors.white70,
                fontSize: 16,
              ),
            ),
          ),

        const Spacer(),

        // Next/Get Started button
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: _pages[_currentPage].colors,
            ),
            borderRadius: BorderRadius.circular(30),
            boxShadow: [
              BoxShadow(
                color: _pages[_currentPage].colors[0].withValues(alpha: 0.3),
                blurRadius: 15,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          child: ElevatedButton(
            onPressed: () {
              if (_currentPage < _pages.length - 1) {
                _pageController.nextPage(
                  duration: const Duration(milliseconds: 300),
                  curve: Curves.easeInOut,
                );
              } else {
                widget.onComplete();
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.transparent,
              shadowColor: Colors.transparent,
              padding: EdgeInsets.symmetric(
                horizontal: _currentPage == _pages.length - 1 ? 32 : 40,
                vertical: 16,
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  _currentPage == _pages.length - 1
                      ? 'Start My Journey'
                      : 'Next',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(width: 8),
                Icon(
                  _currentPage == _pages.length - 1
                      ? Icons.rocket_launch
                      : Icons.arrow_forward,
                  color: Colors.white,
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    _particleController.dispose();
    super.dispose();
  }
}

/// Data model for onboarding pages
class OnboardingPage {
  final String title;
  final String subtitle;
  final String description;
  final IconData icon;
  final List<Color> colors;

  const OnboardingPage({
    required this.title,
    required this.subtitle,
    required this.description,
    required this.icon,
    required this.colors,
  });
}

/// Custom painter for animated background particles
class OnboardingParticlePainter extends CustomPainter {
  final List<Color> colors;
  final double animation;

  OnboardingParticlePainter(this.colors, this.animation);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()..style = PaintingStyle.fill;

    // Generate floating particles
    for (int i = 0; i < 12; i++) {
      final color = colors[i % colors.length];
      final x = (i * 73.0 + animation * 50) % size.width;
      final y = (i * 127.0 + animation * 30) % size.height;
      final radius = 3.0 + (i % 3) * 2.0;

      paint.color = color.withValues(alpha: 0.2 + (animation % 1) * 0.1);
      canvas.drawCircle(Offset(x, y), radius, paint);
    }

    // Draw connecting lines
    paint.strokeWidth = 1;
    paint.style = PaintingStyle.stroke;
    for (int i = 0; i < 6; i++) {
      final color = colors[i % colors.length];
      final x1 = (i * 73.0 + animation * 50) % size.width;
      final y1 = (i * 127.0 + animation * 30) % size.height;
      final x2 = ((i + 3) * 73.0 + animation * 50) % size.width;
      final y2 = ((i + 3) * 127.0 + animation * 30) % size.height;

      paint.color = color.withValues(alpha: 0.1);
      canvas.drawLine(Offset(x1, y1), Offset(x2, y2), paint);
    }
  }

  @override
  bool shouldRepaint(OnboardingParticlePainter oldDelegate) {
    return oldDelegate.animation != animation;
  }
}
